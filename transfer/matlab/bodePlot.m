function bodePlot(file,fileType,units,varargin)
% BODEPLOT Make a Bode plot of the amplitude and phase response of a
%          seismometer from a SAC_PZs file or a RESP file
%
% >> bodePlot(file,fileType)
%
%---Input Variables--------------------------------------------------------
% file      - full path to the file containing the instrument response data
% fileType  - type of file, either 'sacpz' or 'resp'
% units     - if using the 'sacpz' option, the desired output units must be
%             specified as either 'displacement', 'velocity', or 
%             'acceleration', otherwise, indicate the associated units
%---Optional Variables-----------------------------------------------------
% ampFile   - if using the 'resp' option, the full path to the amplitude
%             response generated by evalresp must be indicated
% phaseFile - if using the 'resp' option, the full path to the phase
%             response generated by evalresp must be indicated
%
%--------------------------------------------------------------------------
% Last updated 6/8/2021 by aburky@princeton.edu
%--------------------------------------------------------------------------

% Sample rate (get this from the data)
% fs = 40;
fs = 20;
nyq = fs/2;

if strcmp(fileType,'sacpz')
    [z,p,k] = parsePZ(file);
    
    % Number of zeros depends on desired output units
    z = nonzeros(z);
    if strcmp(units,'displacement')
        z = [complex(0,0); complex(0,0); complex(0,0); z];
    elseif strcmp(units,'velocity')
        z = [complex(0,0); complex(0,0); z];
    elseif strcmp(units,'acceleration')
        z = [complex(0,0); z];
    elseif strcmp(units,'mermaid')
        z = [complex(0,0); z];
    end

    npts = 10000000;
    nfft = 2^nextpow2(npts);
    nfreq = (nfft / 2) + 1;
    f = linspace(0,fs,nfreq);

    [b,a] = zp2tf(z,p,k);
    % [h,w] = freqs(b,a,2*pi*f);
    w = 2*pi*f;
    s = 1j*w;
    h = polyval(b,s)./polyval(a,s);
    
    % Determine appropriate axis limits
    ymax = max(abs(h)) + 10*max(abs(h));
    [~,idx] = min(abs(abs(h)-5e3));
    xmin = 5e-6;
    
elseif strcmp(fileType,'resp')
    amp = dlmread(varargin{1});
    phase = dlmread(varargin{2});
    
    f = amp(:,1);
    amp = amp(:,2);
    phase = phase(:,2);
    
    % Determine appropriate axis limits
    ymax = max(amp) + 10*max(amp);
    % [~,idx] = min(abs(amp-5e3));
    xmin = 5e-6;
else
    error(['Invalid fileType. Currently supported options are ',...
           '''sacpz'' or ''resp'''])
end

% Determine which units are being plotted
if strcmp(units,'displacement')
    ystring = 'Gain (Counts / m)';
elseif strcmp(units,'velocity')
    ystring = 'Gain (Counts / m/s)';
elseif strcmp(units,'acceleration')
    ystring = 'Gain (Counts / m/s$^2$)';
elseif strcmp(units,'mermaid')
    ystring = 'Gain (Counts / Pa)';
end

% Amplitude response plot
ymin = 1;
figure
subplot(1,2,1)
if strcmp(fileType,'sacpz')
    loglog(f,abs(h),'r','linewidth',1)
else
    loglog(f,amp,'r','linewidth',1)
end
hold on
plot([nyq nyq],[1e-5 1e15],'k--')
% xlim([f(idx)*0.5 fs])
xlim([xmin fs])
ylim([ymin ymax])
grid on
title('Amplitude Response')
ylabel(ystring)
xlabel('Frequency (Hz)')
ax = gca;
ax.FontSize = 12;
ax.TickDir = 'out';

% Phase response plot
subplot(1,2,2)
if strcmp(fileType,'sacpz')
    semilogx(f,((180/pi) * angle(h)),'b','linewidth',1)
else
    semilogx(f,phase,'b','linewidth',1)
end
hold on
plot([nyq nyq],[-200 200],'k--')
% xlim([f(idx)*0.5 fs])
xlim([xmin fs])
ylim([-200 200])
grid on
title('Phase Response')
ylabel('Phase ($^{\circ}$)')
xlabel('Frequency (Hz)')
ax = gca;
ax.FontSize = 12;
ax.TickDir = 'out';
ax.YTick = [-180, -135, -90, -45, 0, 45, 90, 135, 180];
set(gcf,'Position',[650 0 600 250])

end
